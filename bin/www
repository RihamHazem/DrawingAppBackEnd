#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('backend:server');
let http = require('http');
let usernames = {};
let rooms = ['room1','room2'];

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

let server = http.createServer(app);
const io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, process.env.OPENSHIFT_NODEJS_IP || process.env.IP || '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

io.on("connection", function(socket) {
    // Log whenever a user connects
     console.log('user connected');

    socket.on('addUser', function(user){
        console.log(user);
        // store the username in the socket session for this client
        socket.username = user.id;
        // store the room name in the socket session for this client
        socket.room = user.room;
        // add the client's username to the global list
        usernames[user.id] = user.id;
        // send client to room 1
        socket.join(user.room);
        // echo to client they've connected
        socket.broadcast.to(user.room).emit('updateConnections', user.id + ' has connected to this room');
        socket.emit('updateRooms', rooms, user.room);
    });

    // When we receive a 'message' event from our client, print out
    // the contents of that message and then echo it back to our client
    // using `io.emit()`
    socket.on('point', function(message) {
        console.log("Message Received: ", message);
        io.sockets.in(socket.room).emit('point', message);
    });
    socket.on('mouseState', function(message) {
        console.log("MouseState Received: ", message);
        io.sockets.in(socket.room).emit('mouseState', message);
    });
    socket.on('changeRadius', function(msg){
        console.log(msg);
        io.sockets.in(socket.room).emit('changeRadius', msg);
    });
    socket.on('undo', function(msg) {
        console.log(msg);
        io.sockets.in(socket.room).emit('undo', msg);
    });
    socket.on('text', function(msg){
        console.log(msg);
        io.sockets.in(socket.room).emit('text', msg);
    });
    socket.on('textVal', function(msg){
        console.log(msg);
        io.sockets.in(socket.room).emit('textVal', msg);
    });
    socket.on('chatMessage', function(msg){
        console.log(msg);
        io.sockets.in(socket.room).emit('chatMessage', msg);
    });

    socket.on('switchRoom', function(newRoom){
        // leave the current room (stored in session)
        socket.leave(socket.room);
        // join new room, received as function parameter
        socket.join(newRoom);
        //  socket.emit('updateRoom', 'you have connected to '+ newRoom);
        // sent message to OLD room
        socket.broadcast.to(socket.room).emit('updateConnections',  socket.username+' has left this room');
        // update socket session room title
        socket.room = newRoom;
        socket.broadcast.to(newRoom).emit('updateConnections', socket.username+' has joined this room');
        socket.emit('updateRooms', rooms, newRoom);
    });

    socket.on('disconnect', function(){
        // remove the username from global usernames list
        delete usernames[socket.username];
        // update list of users in chat, client-side
        io.sockets.emit('updateUsers', usernames);
        // echo in old room that this client has left
        socket.broadcast.emit('updateConnections',  socket.username + 'has disconnected');
        socket.leave(socket.room);
    });

});